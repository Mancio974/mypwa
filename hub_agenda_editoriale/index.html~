<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editorial Hub - Consulenza Editoriale</title>
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="manifest.webmanifest">
    
    <!-- Service Worker -->
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('sw.js')
                    .then(registration => console.log('SW registered: ', registration))
                    .catch(registrationError => console.log('SW registration failed: ', registrationError));
            });
        }
    </script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            /* Palette colori rilassante - ispirata a tonalità naturali e soft */
            --bg-primary: #0f1419;          /* Grigio-blu scuro molto soft */
            --bg-secondary: #1a1f2b;         /* Grigio-blu leggermente più chiaro */
            --bg-tertiary: #242b3a;          /* Grigio-blu medio */
            --surface: #2d3548;              /* Superficie per cards */
            --surface-hover: #35415a;        /* Hover per superfici */
            
            --text-primary: #f8fafc;         /* Bianco puro soft */
            --text-secondary: #cbd5e1;       /* Grigio chiaro rilassante */
            --text-muted: #94a3b8;           /* Grigio medio soft */
            
            --accent-primary: #60a5fa;       /* Blu sereno */
            --accent-secondary: #a78bfa;     /* Viola lavanda */
            --accent-tertiary: #93c5fd;      /* Blu cielo soft */
            
            --success: #86efac;              /* Verde menta soft */
            --warning: #facc15;              /* Giallo sole soft */
            --danger: #fca5a5;               /* Rosa corallo soft */
            
            --border: #334155;               /* Bordo grigio-blu */
            --border-hover: #475569;         /* Bordo al hover */
            
            --shadow: rgba(15, 20, 25, 0.4); /* Ombra molto soft */
            --shadow-lg: rgba(15, 20, 25, 0.6);
        }

        body {
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            background: var(--surface);
            border-radius: 16px;
            box-shadow: 0 4px 20px var(--shadow);
            border: 1px solid var(--border);
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            color: var(--accent-primary);
            font-weight: 600;
        }

        .header p {
            color: var(--accent-secondary);
            font-size: 1.1em;
            font-weight: 400;
        }
        .header h1 {
    			font-size: 2.5em;
   			margin-bottom: 10px;
   			color: var(--accent-primary);
    			font-weight: 600;
    			display: flex;
    			align-items: center;
    			justify-content: center;
    			gap: 12px;
}

		  .header-icon {
    			width: 80px;
    			height: 80px;
    			object-fit: contain;
    			flex-shrink: 0;
}

        .nav-tabs {
            display: flex;
            background: var(--surface);
            border-radius: 12px;
            margin-bottom: 30px;
            overflow: hidden;
            box-shadow: 0 2px 15px var(--shadow);
            border: 1px solid var(--border);
        }

        .nav-tab {
            flex: 1;
            padding: 16px 20px;
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1em;
            font-weight: 500;
        }

        .nav-tab:hover {
            background: var(--surface-hover);
            color: var(--text-primary);
        }

        .nav-tab.active {
            background: var(--accent-primary);
            color: white;
        }

        .section {
            display: none;
            background: var(--surface);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 30px;
            border: 1px solid var(--border);
            box-shadow: 0 4px 20px var(--shadow);
            margin-bottom: 30px;
        }

        .section.active {
            display: block;
            animation: fadeIn 0.4s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(15px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .section h2 {
            color: var(--accent-primary);
            margin-bottom: 25px;
            font-size: 1.8em;
            text-align: center;
            border-bottom: 2px solid var(--accent-primary);
            padding-bottom: 12px;
            font-weight: 600;
        }

        .form-grid {
            display: grid;
            gap: 20px;
            margin-bottom: 25px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        label {
            margin-bottom: 8px;
            color: var(--accent-secondary);
            font-weight: 500;
            font-size: 0.95em;
        }

        input, textarea, select {
            padding: 12px 16px;
            border: 2px solid var(--border);
            border-radius: 10px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 1em;
            transition: all 0.3s ease;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--accent-primary);
            background: var(--bg-tertiary);
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
        }

        input::placeholder, textarea::placeholder {
            color: var(--text-muted);
        }

        textarea {
            resize: vertical;
            min-height: 80px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 0.95em;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.3px;
        }

        .btn-primary {
            background: var(--accent-primary);
            color: white;
        }

        .btn-primary:hover {
            background: #3b82f6;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(96, 165, 250, 0.3);
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-success:hover {
            background: #4ade80;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(134, 239, 172, 0.3);
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background: #f87171;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(252, 165, 165, 0.3);
        }

        .btn-secondary {
            background: var(--border);
            color: var(--text-secondary);
        }

        .btn-secondary:hover {
            background: var(--border-hover);
            color: var(--text-primary);
            transform: translateY(-1px);
        }

        .btn-group {
            display: flex;
            gap: 12px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 20px;
            background: var(--bg-secondary);
            border-radius: 12px;
            border: 1px solid var(--border);
        }

        .export-import {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .appointments-list {
            max-height: 600px;
            overflow-y: auto;
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 0;
            background: var(--bg-secondary);
        }

        .list-container {
            max-height: 500px;
            overflow-y: auto;
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 0;
            background: var(--bg-secondary);
        }

        .list-item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 20px;
            margin: 0;
            border-bottom: 1px solid var(--border);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .list-item:hover {
            background: var(--surface-hover);
        }

        .list-item:last-child {
            border-bottom: none;
        }

        .list-item.completed {
            opacity: 0.7;
            background: rgba(134, 239, 172, 0.1);
        }

        .item-info {
            flex: 1;
            margin-right: 15px;
        }

        .item-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--text-primary);
            font-size: 1.1em;
        }

        .item-meta {
            font-size: 0.9em;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
            margin-bottom: 8px;
        }

        .item-description {
            font-size: 0.9em;
            color: var(--text-muted);
            line-height: 1.4;
            margin-top: 8px;
        }

        .item-actions {
            display: flex;
            gap: 8px;
            flex-shrink: 0;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.8em;
        }

        .contact-type-badge {
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 0.75em;
            font-weight: 600;
            margin-left: 8px;
        }

        .type-editori { background: var(--accent-tertiary); color: #1e293b; }
        .type-direttori { background: var(--success); color: #1e293b; }
        .type-editor { background: #fbbf24; color: #1e293b; }
        .type-impaginatori { background: #f59e0b; color: white; }
        .type-grafici { background: var(--danger); color: white; }
        .type-responsabili { background: var(--accent-secondary); color: white; }
        .type-autori { background: #c084fc; color: white; }
        .type-redattori { background: #ec4899; color: white; }
        .type-altro { background: #6b7280; color: white; }

        .project-deadline {
            color: var(--warning);
            font-weight: 600;
        }

        .status-indicator {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
        }

        .status-upcoming { background: var(--accent-primary); }
        .status-today { background: var(--warning); }
        .status-overdue { background: var(--danger); }
        .status-completed { background: var(--success); }

        .appointment-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(15, 20, 25, 0.85);
            z-index: 1000;
            backdrop-filter: blur(8px);
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--surface);
            padding: 30px;
            border-radius: 16px;
            width: 90%;
            max-width: 550px;
            max-height: 90vh;
            overflow-y: auto;
            border: 1px solid var(--border);
            box-shadow: 0 20px 40px var(--shadow-lg);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border);
        }

        .modal-header h3 {
            color: var(--accent-primary);
            font-size: 1.5em;
            font-weight: 600;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.8em;
            color: var(--text-muted);
            cursor: pointer;
            padding: 5px;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .close-modal:hover {
            background: var(--border);
            color: var(--danger);
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: var(--text-muted);
        }

        .empty-state-icon {
            font-size: 3em;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        @media (max-width: 768px) {
            .container { padding: 15px; }
            .nav-tabs { flex-direction: column; }
            .form-grid { grid-template-columns: 1fr; }
            .controls { 
                flex-direction: column; 
                gap: 15px; 
                text-align: center;
            }
            .export-import { justify-content: center; }
            .header h1 { font-size: 2em; }
            .list-item { 
                flex-direction: column;
                gap: 15px;
                text-align: left;
            }
            .item-actions {
                width: 100%;
                justify-content: center;
            }
        }

        .fade-in {
            animation: fadeIn 0.4s ease-in;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <header class="header">
            <h1><img src="icons/header.png" alt="Icona" class="header-icon">Agenda Editoriale</h1>
            <p>Gestione professionale per consulenti dell'editoria</p>
        </header>

        <!-- Navigation -->
        <nav class="nav-tabs">
            <button class="nav-tab active" data-tab="calendar">📅 Appuntamenti</button>
            <button class="nav-tab" data-tab="contacts">👥 Contatti</button>
            <button class="nav-tab" data-tab="projects">📋 Progetti</button>
        </nav>

        <!-- Calendar Section -->
        <section id="calendar" class="section active">
            <h2>Gestione Appuntamenti</h2>
            
            <div class="controls">
                <div class="export-import">
                    <button class="btn btn-secondary" onclick="exportData('appointments')">📤 Esporta CSV</button>
                    <input type="file" id="importAppointments" accept=".csv" style="display: none;" onchange="importCSV(event, 'appointments')">
                    <button class="btn btn-secondary" onclick="document.getElementById('importAppointments').click()">📥 Importa CSV</button>
                </div>
                <button class="btn btn-primary" onclick="showAppointmentModal(null)">➕ Nuovo Appuntamento</button>
            </div>

            <div class="appointments-list" id="appointmentsList">
                <!-- Appointments will be populated here -->
            </div>
        </section>

        <!-- Contacts Section -->
        <section id="contacts" class="section">
            <h2>Gestione Contatti</h2>
            
            <div class="controls">
                <div class="export-import">
                    <button class="btn btn-secondary" onclick="exportData('contacts')">📤 Esporta CSV</button>
                    <input type="file" id="importContacts" accept=".csv" style="display: none;" onchange="importCSV(event, 'contacts')">
                    <button class="btn btn-secondary" onclick="document.getElementById('importContacts').click()">📥 Importa CSV</button>
                </div>
                <button class="btn btn-primary" onclick="showContactModal(null)">➕ Nuovo Contatto</button>
            </div>

            <div class="form-grid">
                <select id="contactFilter" onchange="filterContacts()">
                    <option value="">Tutti i tipi</option>
                    <option value="editori">Editori</option>
                    <option value="direttori">Direttori Editoriali</option>
                    <option value="editor">Editor</option>
                    <option value="impaginatori">Impaginatori</option>
                    <option value="grafici">Grafici</option>
                    <option value="responsabili">Responsabili di Collana</option>
                    <option value="autori">Autori</option>
                    <option value="redattori">Redattori</option>
                    <option value="altro">Altro</option>
                </select>
            </div>

            <div class="list-container" id="contactsList">
                <!-- Contacts will be populated here -->
            </div>
        </section>

        <!-- Projects Section -->
        <section id="projects" class="section">
            <h2>Gestione Progetti</h2>
            
            <div class="controls">
                <div class="export-import">
                    <button class="btn btn-secondary" onclick="exportData('projects')">📤 Esporta CSV</button>
                    <input type="file" id="importProjects" accept=".csv" style="display: none;" onchange="importCSV(event, 'projects')">
                    <button class="btn btn-secondary" onclick="document.getElementById('importProjects').click()">📥 Importa CSV</button>
                </div>
                <button class="btn btn-primary" onclick="showProjectModal(null)">➕ Nuovo Progetto</button>
            </div>

            <div class="list-container" id="projectsList">
                <!-- Projects will be populated here -->
            </div>
        </section>

        <!-- Appointment Modal -->
        <div id="appointmentModal" class="appointment-modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 id="appointmentModalTitle">Nuovo Appuntamento</h3>
                    <button class="close-modal" onclick="closeModal('appointmentModal')">&times;</button>
                </div>
                <form id="appointmentForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Titolo</label>
                            <input type="text" id="appointmentTitle" required>
                        </div>
                        <div class="form-group">
                            <label>Data</label>
                            <input type="date" id="appointmentDate" required>
                        </div>
                        <div class="form-group">
                            <label>Ora</label>
                            <input type="time" id="appointmentTime" required>
                        </div>
                        <div class="form-group full-width">
                            <label>Descrizione</label>
                            <textarea id="appointmentDescription" placeholder="Dettagli dell'appuntamento..."></textarea>
                        </div>
                        <div class="form-group full-width">
                            <label>Contatto</label>
                            <input type="text" id="appointmentContact" placeholder="Nome del contatto (opzionale)">
                        </div>
                        <div class="form-group full-width">
                            <label>Luogo</label>
                            <input type="text" id="appointmentLocation" placeholder="Dove si terrà l'appuntamento">
                        </div>
                        <input type="hidden" id="appointmentId">
                    </div>
                    <div class="btn-group">
                        <button type="submit" class="btn btn-primary">Salva</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAppointment()" style="display: none;">Elimina</button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal('appointmentModal')">Annulla</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Contact Modal -->
        <div id="contactModal" class="appointment-modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 id="contactModalTitle">Nuovo Contatto</h3>
                    <button class="close-modal" onclick="closeModal('contactModal')">&times;</button>
                </div>
                <form id="contactForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Nome e Cognome</label>
                            <input type="text" id="contactName" required>
                        </div>
                        <div class="form-group">
                            <label>Tipo di Contatto</label>
                            <select id="contactType" required>
                                <option value="">Seleziona tipo</option>
                                <option value="editori">Editori</option>
                                <option value="direttori">Direttori Editoriali</option>
                                <option value="editor">Editor</option>
                                <option value="impaginatori">Impaginatori</option>
                                <option value="grafici">Grafici</option>
                                <option value="responsabili">Responsabili di Collana</option>
                                <option value="autori">Autori</option>
                                <option value="redattori">Redattori</option>
                                <option value="altro">Altro</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Telefono Fisso</label>
                            <input type="tel" id="contactPhoneFixed" placeholder="012 3456789">
                        </div>
                        <div class="form-group">
                            <label>Telefono Mobile</label>
                            <input type="tel" id="contactPhoneMobile" placeholder="333 1234567">
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" id="contactEmail" placeholder="nome@esempio.com">
                        </div>
                        <div class="form-group">
                            <label>Indirizzo Ufficio</label>
                            <input type="text" id="contactAddress" placeholder="Via Example 123, Città">
                        </div>
                        <div class="form-group full-width">
                            <label>Note Personali</label>
                            <textarea id="contactNotes" placeholder="Osservazioni personali..."></textarea>
                        </div>
                        <input type="hidden" id="contactId">
                    </div>
                    <div class="btn-group">
                        <button type="submit" class="btn btn-primary">Salva</button>
                        <button type="button" class="btn btn-danger" onclick="deleteContact()" style="display: none;">Elimina</button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal('contactModal')">Annulla</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Project Modal -->
        <div id="projectModal" class="appointment-modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 id="projectModalTitle">Nuovo Progetto</h3>
                    <button class="close-modal" onclick="closeModal('projectModal')">&times;</button>
                </div>
                <form id="projectForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Nome Progetto</label>
                            <input type="text" id="projectName" required>
                        </div>
                        <div class="form-group">
                            <label>Data di Consegna</label>
                            <input type="date" id="projectDeadline" required>
                        </div>
                        <div class="form-group full-width">
                            <label>Note</label>
                            <textarea id="projectNotes" placeholder="Dettagli del progetto, stato di avanzamento..."></textarea>
                        </div>
                        <input type="hidden" id="projectId">
                    </div>
                    <div class="btn-group">
                        <button type="submit" class="btn btn-primary">Salva</button>
                        <button type="button" class="btn btn-danger" onclick="deleteProject()" style="display: none;">Elimina</button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal('projectModal')">Annulla</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let appointments = JSON.parse(localStorage.getItem('appointments')) || [];
        let contacts = JSON.parse(localStorage.getItem('contacts')) || [];
        let projects = JSON.parse(localStorage.getItem('projects')) || [];
        let editingId = null;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            setupEventListeners();
            renderAppointmentsList();
            renderContacts();
            renderProjects();
        });

        function initializeApp() {
            // Set today as default date
            document.getElementById('appointmentDate').valueAsDate = new Date();
            
            // Request notification permission
            if ('Notification' in window && Notification.permission === 'default') {
                Notification.requestPermission();
            }
        }

        function setupEventListeners() {
            // Tab navigation
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    const targetTab = e.currentTarget.dataset.tab;
                    
                    // Update active tab
                    document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
                    e.currentTarget.classList.add('active');
                    
                    // Show target section
                    document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
                    document.getElementById(targetTab).classList.add('active');
                    
                    // Render content
                    if (targetTab === 'calendar') {
                        renderAppointmentsList();
                    } else if (targetTab === 'contacts') {
                        renderContacts();
                    } else if (targetTab === 'projects') {
                        renderProjects();
                    }
                });
            });

            // Form submissions
            document.getElementById('appointmentForm').addEventListener('submit', handleAppointmentSubmit);
            document.getElementById('contactForm').addEventListener('submit', handleContactSubmit);
            document.getElementById('projectForm').addEventListener('submit', handleProjectSubmit);

            // Close modals on escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    closeAllModals();
                }
            });

            // Click outside modal to close
            document.querySelectorAll('.appointment-modal').forEach(modal => {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        closeAllModals();
                    }
                });
            });
        }

        // Appointments Functions
        function renderAppointmentsList() {
            const container = document.getElementById('appointmentsList');
            
            // Sort appointments by date and time
            const sortedAppointments = [...appointments].sort((a, b) => {
                const dateA = new Date(a.date + 'T' + a.time);
                const dateB = new Date(b.date + 'T' + b.time);
                return dateA - dateB;
            });
            
            if (sortedAppointments.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📅</div>
                        <p>Nessun appuntamento programmato</p>
                        <p style="font-size: 0.9em; margin-top: 5px;">Crea il tuo primo appuntamento cliccando su "Nuovo Appuntamento"</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = sortedAppointments.map(apt => {
                const aptDateTime = new Date(apt.date + 'T' + apt.time);
                const now = new Date();
                const isPast = aptDateTime < now;
                
                const dateStr = aptDateTime.toLocaleDateString('it-IT', { 
                    day: 'numeric', 
                    month: 'short', 
                    year: 'numeric' 
                });
                
                const statusClass = isPast ? 'status-completed' : 'status-upcoming';
                
                return `
                    <div class="list-item ${isPast ? 'completed' : ''}" onclick="showAppointmentModal('${apt.id}')">
                        <div class="item-info">
                            <div class="item-title">${apt.title}</div>
                            <div class="item-meta">
                                <span class="status-indicator ${statusClass}"></span>
                                <span>${apt.time} • ${dateStr}</span>
                                ${apt.contact ? `<span>• ${apt.contact}</span>` : ''}
                                ${apt.location ? `<span>• ${apt.location}</span>` : ''}
                            </div>
                            ${apt.description ? `<div class="item-description">${apt.description}</div>` : ''}
                            <div style="font-size: 0.8em; color: var(--text-muted); margin-top: 8px;">
                                ${isPast ? 'Completato' : 'In programma'}
                            </div>
                        </div>
                        <div class="item-actions">
                            <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); showAppointmentModal('${apt.id}')">Modifica</button>
                            <button class="btn btn-danger btn-small" onclick="event.stopPropagation(); deleteAppointmentConfirm('${apt.id}')">Elimina</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function showAppointmentModal(id) {
            const modal = document.getElementById('appointmentModal');
            const form = document.getElementById('appointmentForm');
            const title = document.getElementById('appointmentModalTitle');
            const deleteBtn = document.querySelector('#appointmentForm .btn-danger');
            
            editingId = id;
            
            if (id) {
                const appointment = appointments.find(a => a.id === id);
                if (appointment) {
                    document.getElementById('appointmentTitle').value = appointment.title;
                    document.getElementById('appointmentDate').value = appointment.date;
                    document.getElementById('appointmentTime').value = appointment.time;
                    document.getElementById('appointmentDescription').value = appointment.description;
                    document.getElementById('appointmentContact').value = appointment.contact || '';
                    document.getElementById('appointmentLocation').value = appointment.location || '';
                    document.getElementById('appointmentId').value = id;
                    title.textContent = 'Modifica Appuntamento';
                    deleteBtn.style.display = 'inline-block';
                }
            } else {
                form.reset();
                document.getElementById('appointmentDate').valueAsDate = new Date();
                document.getElementById('appointmentId').value = '';
                title.textContent = 'Nuovo Appuntamento';
                deleteBtn.style.display = 'none';
            }
            
            modal.style.display = 'block';
            document.getElementById('appointmentTitle').focus();
        }

        function handleAppointmentSubmit(e) {
            e.preventDefault();
            
            const id = document.getElementById('appointmentId').value;
            const appointment = {
                id: id || Date.now().toString(),
                title: document.getElementById('appointmentTitle').value,
                date: document.getElementById('appointmentDate').value,
                time: document.getElementById('appointmentTime').value,
                description: document.getElementById('appointmentDescription').value,
                contact: document.getElementById('appointmentContact').value,
                location: document.getElementById('appointmentLocation').value,
                createdAt: id ? appointments.find(a => a.id === id)?.createdAt : new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            if (id) {
                const index = appointments.findIndex(a => a.id === id);
                appointments[index] = appointment;
            } else {
                appointments.push(appointment);
            }
            
            saveAppointments();
            renderAppointmentsList();
            closeModal('appointmentModal');
            
            // Show notification
            if (Notification.permission === 'granted') {
                new Notification('Appuntamento salvato', {
                    body: appointment.title,
                    icon: '📅'
                });
            }
        }

        function deleteAppointment() {
            if (editingId && confirm('Sei sicuro di voler eliminare questo appuntamento?')) {
                appointments = appointments.filter(a => a.id !== editingId);
                saveAppointments();
                renderAppointmentsList();
                closeModal('appointmentModal');
            }
        }

        function deleteAppointmentConfirm(id) {
            if (confirm('Sei sicuro di voler eliminare questo appuntamento?')) {
                appointments = appointments.filter(a => a.id !== id);
                saveAppointments();
                renderAppointmentsList();
            }
        }

        // Contacts Functions
        function renderContacts() {
            const container = document.getElementById('contactsList');
            const filter = document.getElementById('contactFilter').value;
            
            let filteredContacts = contacts;
            if (filter) {
                filteredContacts = contacts.filter(c => c.type === filter);
            }
            
            filteredContacts.sort((a, b) => a.name.localeCompare(b.name));
            
            if (filteredContacts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">👥</div>
                        <p>Nessun contatto trovato</p>
                        ${!filter ? '<p style="font-size: 0.9em; margin-top: 5px;">Aggiungi il tuo primo contatto cliccando su "Nuovo Contatto"</p>' : '<p style="font-size: 0.9em; margin-top: 5px;">Prova con un altro filtro</p>'}
                    </div>
                `;
                return;
            }
            
            container.innerHTML = filteredContacts.map(contact => `
                <div class="list-item" onclick="showContactModal('${contact.id}')">
                    <div class="item-info">
                        <div class="item-title">${contact.name}</div>
                        <div class="item-meta">
                            <span class="contact-type-badge type-${contact.type}">${getContactTypeLabel(contact.type)}</span>
                            ${contact.email ? `<span>${contact.email}</span>` : ''}
                            ${contact.phoneMobile ? `<span>• ${contact.phoneMobile}</span>` : ''}
                        </div>
                        ${contact.notes ? `<div class="item-description">${contact.notes}</div>` : ''}
                        ${contact.address ? `<div class="item-description">${contact.address}</div>` : ''}
                    </div>
                    <div class="item-actions">
                        <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); showContactModal('${contact.id}')">Modifica</button>
                        <button class="btn btn-danger btn-small" onclick="event.stopPropagation(); deleteContactConfirm('${contact.id}')">Elimina</button>
                    </div>
                </div>
            `).join('');
        }

        function filterContacts() {
            renderContacts();
        }

        function getContactTypeLabel(type) {
            const labels = {
                'editori': 'Editori',
                'direttori': 'Direttori',
                'editor': 'Editor',
                'impaginatori': 'Impaginatori',
                'grafici': 'Grafici',
                'responsabili': 'Resp. Collana',
                'autori': 'Autori',
                'redattori': 'Redattori',
                'altro': 'Altro'
            };
            return labels[type] || type;
        }

        function showContactModal(id) {
            const modal = document.getElementById('contactModal');
            const form = document.getElementById('contactForm');
            const title = document.getElementById('contactModalTitle');
            const deleteBtn = document.querySelector('#contactForm .btn-danger');
            
            editingId = id;
            
            if (id) {
                const contact = contacts.find(c => c.id === id);
                if (contact) {
                    document.getElementById('contactName').value = contact.name;
                    document.getElementById('contactType').value = contact.type;
                    document.getElementById('contactPhoneFixed').value = contact.phoneFixed || '';
                    document.getElementById('contactPhoneMobile').value = contact.phoneMobile || '';
                    document.getElementById('contactEmail').value = contact.email || '';
                    document.getElementById('contactAddress').value = contact.address || '';
                    document.getElementById('contactNotes').value = contact.notes || '';
                    document.getElementById('contactId').value = id;
                    title.textContent = 'Modifica Contatto';
                    deleteBtn.style.display = 'inline-block';
                }
            } else {
                form.reset();
                document.getElementById('contactId').value = '';
                title.textContent = 'Nuovo Contatto';
                deleteBtn.style.display = 'none';
            }
            
            modal.style.display = 'block';
            document.getElementById('contactName').focus();
        }

        function handleContactSubmit(e) {
            e.preventDefault();
            
            const id = document.getElementById('contactId').value;
            const contact = {
                id: id || Date.now().toString(),
                name: document.getElementById('contactName').value,
                type: document.getElementById('contactType').value,
                phoneFixed: document.getElementById('contactPhoneFixed').value,
                phoneMobile: document.getElementById('contactPhoneMobile').value,
                email: document.getElementById('contactEmail').value,
                address: document.getElementById('contactAddress').value,
                notes: document.getElementById('contactNotes').value,
                createdAt: id ? contacts.find(c => c.id === id)?.createdAt : new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            if (id) {
                const index = contacts.findIndex(c => c.id === id);
                contacts[index] = contact;
            } else {
                contacts.push(contact);
            }
            
            saveContacts();
            renderContacts();
            closeModal('contactModal');
        }

        function deleteContact() {
            if (editingId && confirm('Sei sicuro di voler eliminare questo contatto?')) {
                contacts = contacts.filter(c => c.id !== editingId);
                saveContacts();
                renderContacts();
                closeModal('contactModal');
            }
        }

        function deleteContactConfirm(id) {
            if (confirm('Sei sicuro di voler eliminare questo contatto?')) {
                contacts = contacts.filter(c => c.id !== id);
                saveContacts();
                renderContacts();
            }
        }

        // Projects Functions
        function renderProjects() {
            const container = document.getElementById('projectsList');
            
            projects.sort((a, b) => new Date(a.deadline) - new Date(b.deadline));
            
            if (projects.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📋</div>
                        <p>Nessun progetto in corso</p>
                        <p style="font-size: 0.9em; margin-top: 5px;">Aggiungi il tuo primo progetto cliccando su "Nuovo Progetto"</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = projects.map(project => {
                const deadline = new Date(project.deadline);
                const now = new Date();
                const isOverdue = deadline < now;
                const daysLeft = Math.ceil((deadline - now) / (1000 * 60 * 60 * 24));
                
                const statusClass = isOverdue ? 'status-overdue' : daysLeft <= 7 ? 'status-today' : 'status-upcoming';
                
                return `
                    <div class="list-item ${isOverdue ? 'completed' : ''}" onclick="showProjectModal('${project.id}')">
                        <div class="item-info">
                            <div class="item-title">${project.name}</div>
                            <div class="item-meta">
                                <span class="status-indicator ${statusClass}"></span>
                                <span class="project-deadline">Consegna: ${project.deadline}</span>
                                ${!isOverdue ? `<span>• ${daysLeft} ${daysLeft === 1 ? 'giorno' : 'giorni'} rimanenti</span>` : '<span>• Scaduto</span>'}
                            </div>
                            ${project.notes ? `<div class="item-description">${project.notes}</div>` : ''}
                        </div>
                        <div class="item-actions">
                            <button class="btn btn-primary btn-small" onclick="event.stopPropagation(); showProjectModal('${project.id}')">Modifica</button>
                            <button class="btn btn-danger btn-small" onclick="event.stopPropagation(); deleteProjectConfirm('${project.id}')">Elimina</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function showProjectModal(id) {
            const modal = document.getElementById('projectModal');
            const form = document.getElementById('projectForm');
            const title = document.getElementById('projectModalTitle');
            const deleteBtn = document.querySelector('#projectForm .btn-danger');
            
            editingId = id;
            
            if (id) {
                const project = projects.find(p => p.id === id);
                if (project) {
                    document.getElementById('projectName').value = project.name;
                    document.getElementById('projectDeadline').value = project.deadline;
                    document.getElementById('projectNotes').value = project.notes || '';
                    document.getElementById('projectId').value = id;
                    title.textContent = 'Modifica Progetto';
                    deleteBtn.style.display = 'inline-block';
                }
            } else {
                form.reset();
                document.getElementById('projectDeadline').valueAsDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 giorni da oggi
                document.getElementById('projectId').value = '';
                title.textContent = 'Nuovo Progetto';
                deleteBtn.style.display = 'none';
            }
            
            modal.style.display = 'block';
            document.getElementById('projectName').focus();
        }

        function handleProjectSubmit(e) {
            e.preventDefault();
            
            const id = document.getElementById('projectId').value;
            const project = {
                id: id || Date.now().toString(),
                name: document.getElementById('projectName').value,
                deadline: document.getElementById('projectDeadline').value,
                notes: document.getElementById('projectNotes').value,
                createdAt: id ? projects.find(p => p.id === id)?.createdAt : new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            
            if (id) {
                const index = projects.findIndex(p => p.id === id);
                projects[index] = project;
            } else {
                projects.push(project);
            }
            
            saveProjects();
            renderProjects();
            closeModal('projectModal');
        }

        function deleteProject() {
            if (editingId && confirm('Sei sicuro di voler eliminare questo progetto?')) {
                projects = projects.filter(p => p.id !== editingId);
                saveProjects();
                renderProjects();
                closeModal('projectModal');
            }
        }

        function deleteProjectConfirm(id) {
            if (confirm('Sei sicuro di voler eliminare questo progetto?')) {
                projects = projects.filter(p => p.id !== id);
                saveProjects();
                renderProjects();
            }
        }

        // Modal Functions
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            editingId = null;
        }

        function closeAllModals() {
            document.querySelectorAll('.appointment-modal').forEach(modal => {
                modal.style.display = 'none';
            });
            editingId = null;
        }

        // Data Storage Functions
        function saveAppointments() {
            localStorage.setItem('appointments', JSON.stringify(appointments));
        }

        function saveContacts() {
            localStorage.setItem('contacts', JSON.stringify(contacts));
        }

        function saveProjects() {
            localStorage.setItem('projects', JSON.stringify(projects));
        }

        // CSV Export/Import Functions
        function exportData(type) {
            let data = [];
            let filename = '';
            
            switch(type) {
                case 'appointments':
                    data = appointments;
                    filename = 'appuntamenti_editorial_hub.csv';
                    break;
                case 'contacts':
                    data = contacts;
                    filename = 'contatti_editorial_hub.csv';
                    break;
                case 'projects':
                    data = projects;
                    filename = 'progetti_editorial_hub.csv';
                    break;
            }
            
            if (data.length === 0) {
                alert('Nessun dato da esportare');
                return;
            }
            
            const headers = Object.keys(data[0]);
            const csvContent = [
                headers.join(','),
                ...data.map(row => headers.map(header => 
                    `"${(row[header] || '').toString().replace(/"/g, '""')}"`
                ).join(','))
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function importCSV(event, type) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const text = e.target.result;
                const rows = text.split('\n').map(row => row.split(',').map(cell => cell.trim().replace(/^"|"$/g, '')));
                const headers = rows[0];
                const data = rows.slice(1).filter(row => row.length > 1 && row[0]);
                
                let importedData = data.map(row => {
                    const obj = {};
                    headers.forEach((header, index) => {
                        obj[header] = row[index] || '';
                    });
                    return obj;
                });
                
                // Validate and import
                let successCount = 0;
                let errorCount = 0;
                
                importedData.forEach(item => {
                    try {
                        switch(type) {
                            case 'appointments':
                                if (item.title && item.date && item.time) {
                                    item.id = Date.now().toString() + Math.random().toString(36).substr(2, 9);
                                    appointments.push(item);
                                    successCount++;
                                } else {
                                    errorCount++;
                                }
                                break;
                            case 'contacts':
                                if (item.name && item.type) {
                                    item.id = Date.now().toString() + Math.random().toString(36).substr(2, 9);
                                    contacts.push(item);
                                    successCount++;
                                } else {
                                    errorCount++;
                                }
                                break;
                            case 'projects':
                                if (item.name && item.deadline) {
                                    item.id = Date.now().toString() + Math.random().toString(36).substr(2, 9);
                                    projects.push(item);
                                    successCount++;
                                } else {
                                    errorCount++;
                                }
                                break;
                        }
                    } catch (err) {
                        errorCount++;
                    }
                });
                
                // Save data
                if (type === 'appointments') saveAppointments();
                if (type === 'contacts') saveContacts();
                if (type === 'projects') saveProjects();
                
                // Refresh view
                if (type === 'appointments') {
                    renderAppointmentsList();
                } else if (type === 'contacts') {
                    renderContacts();
                } else if (type === 'projects') {
                    renderProjects();
                }
                
                alert(`Importazione completata: ${successCount} elementi importati, ${errorCount} errori`);
                event.target.value = '';
            };
            
            reader.readAsText(file, 'UTF-8');
        }

        // PWA Install Prompt
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
        });
    </script>
</body>
</html>
